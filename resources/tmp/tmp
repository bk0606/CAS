

 // https://api.vk.com/method/wall.get?owner_id=-29534144&count=1&v=5.7


_ = Utils.time { resp.entity.asString.parseJson.asJsObject.fields("response").asJsObject.fields("items") } (" js ")

 response: {
 count: 2,
 items: [{
 id: 3520024,
 from_id: 71448083,
 date: 1457991451,
 text: '',
 likes: {
 count: 32,
 user_likes: 0,
 can_like: 1
 },
 attachments: [{
 type: 'photo',
 photo: {
 id: 405700364,
 album_id: -8,
 owner_id: -29534144,
 user_id: 71448083,
 photo_75: 'https://pp.vk.me/...10d/f_AqW_ixuSU.jpg',
 photo_130: 'https://pp.vk.me/...10e/m6tHNY75164.jpg',
 photo_604: 'https://pp.vk.me/...10f/JR1EdweIIV0.jpg',
 photo_807: 'https://pp.vk.me/...110/UjY2Bubx5So.jpg',
 photo_1280: 'https://pp.vk.me/...111/T79EaOWKanA.jpg',
 width: 1143,
 height: 800,
 text: '',
 date: 1457991451,
 access_key: 'd01f88f2446291fa10'
 }
 }]
 }],
 profiles: [{
 id: 71448083,
 first_name: 'Кирилл',
 last_name: 'Леоненко',
 sex: 2,
 screen_name: 'id71448083',
 photo_50: 'https://pp.vk.me/...dd9/onLY13CWkVo.jpg',
 photo_100: 'https://pp.vk.me/...dd8/kGp2MWmJvQM.jpg',
 online: 0
 }],
 groups: []
 }

  def parseCommentsCount(resp: String): List[Double] = for {
    Some(Dict(respJson)) <- List(JSON.parseFull(resp))
    Dict(respObj) = respJson("response")
    Arr(posts) = respObj("items")
    Dict(post) <- posts
    Dict(comments) = post("comments")
    Dbl(count) = comments("count")
  } yield count


      requestF.map(r => {
      println("counts! ")
      val counts = parseCommentsCount(r.entity.asString)
      println("counts = " + counts)
      math.round(counts.sum / counts.length)
    })



object SiftersFactory {
  def createSiftUnit(service: ApiService) = Props(new ASiftUnit(service))
}

class ASiftUnit(val service: ApiService) extends Actor {

  override def receive = {
    case StartSiftUnit(estim, tags) => {
      for {
        tag <- tags
        subjs <- service.getTagSubjects(tag)
        if (subjs)
      }
        sender() ! Right()
    }
  }

  def makeSiftRound(subjs: List[Subject]) = ???
}


    val f = l.find(i => i._1.isFailure)
    if (f.isEmpty) Success(l.foldLeft(0.0){ (l, r)  => l + r._1.get * r._2 }) else f.get._1

case class Validatable[T](f: => T, msg: String);

  class Validated[T](valids: List[Validatable]) {
    val (success, failures) = valids.foldRight(List[T], List[String]) { (l, r) =>
      case (l: T, (sx, fx))       => (l :: sx, fx)
      case (l: String, (sx, fx))  => (sx, l :: fx)
    }

    def isAllSuccess = failures.length == 0
    def isAnySuccess = success.length > 0
  }
  

  validated = Validated[Int] (
    Validatable( { "123".toInt }, "123 is not an int"),
    Validatable( { "wasd".toInt }, "wasd is not an int")
  )

  if (validated.isAllSuccess) 




package cas.model.vk_subject
package cas.model._

class Subject(componentsL: List[Component]) extends cas.model.subject.Subject {
  
}



  // val json = UserSettings(25).toJson
  // println(json)
  // val setts = json.convertTo[UserSettings]
  // println(setts.likesThreshold)

  // Utils.writeToFile(Utils.dataPath + "/web.model/UserSettings.json", UserSettings(45).toJson.prettyPrint)

  // val file = Source.fromFile(Utils.dataPath + "/web.model/UserSettings.json").mkString

  // val usrSettings = if (file.trim.isEmpty) UserSettings(20) else file.parseJson.convertTo[UserSettings]

  // println(usrSettings.likesThreshold)
