Ноуты:
1. Core i5, 8 GB RAM, 256 GB SSD Touchscreen
http://www.amazon.com/ASUS-ZenBook-UX303UA-13-3-Inch-FHD-Touchscreen-Laptop-Intel-Core-i5-8-GB-RAM-256-GB-SSD-Windows-10-64-bit/dp/B014VHW24Y/ref=cm_cr_getr_d_rvw_txt?ie=UTF8

2. SSD 256, i7 6500U, Nvidia GTX950M, 15-inch = 789.99
http://www.amazon.com/gp/product/B0146DD02G?psc=1&redirect=true&ref_=ox_sc_act_title_3&smid=ATVPDKIKX0DER

Запасные варианты

https://market.yandex.ru/product/12486115/spec?hid=91013&track=char_map

Игровой но с HDD: 
http://www.amazon.com/gp/product/B015QZVA6G?psc=1&redirect=true&ref_=ox_sc_act_title_2&smid=A2TC87EJKQMY9O

i5-5200U/8G/256SSD/FHD 
CUK. Хз доставят или нет. 
http://www.amazon.com/gp/product/B00X409AN6?psc=1&redirect=true&ref_=ox_sc_act_title_5&smid=A2TC87EJKQMY9O

Zen305 Black
http://www.amazon.com/ZenBook-UX305CA-13-3-Inch-Touchscreen-Quad-HD/dp/B014VHWFKA/ref=sr_1_3?s=pc&ie=UTF8&qid=1458211621&sr=1-3&keywords=asus+305

LG Core i5 / 128GB SSD / 8 GB / 13-inch = $619.99
http://www.amazon.com/gp/product/B0158XJX6U?psc=1&redirect=true&ref_=ox_sc_act_title_4&smid=AZZ6L3UVDX4O

Core i7, 8GB, 1TB HDD, Intel HD (?)
http://www.amazon.com/gp/product/B014LE6A6I?psc=1&redirect=true&ref_=ox_sc_act_title_1&smid=ATVPDKIKX0DER

SSD 256 / Core i5 6200U / 8 GB RAM
http://www.amazon.com/Zenbook-UX305LA-13-3-Inch-Generation-Titanium/dp/B013KKANTE/ref=sr_1_1?s=pc&ie=UTF8&qid=1458211621&sr=1-1&keywords=asus+305


 // https://api.vk.com/method/wall.get?owner_id=-29534144&count=1&v=5.7


_ = Utils.time { resp.entity.asString.parseJson.asJsObject.fields("response").asJsObject.fields("items") } (" js ")

 response: {
 count: 2,
 items: [{
 id: 3520024,
 from_id: 71448083,
 date: 1457991451,
 text: '',
 likes: {
 count: 32,
 user_likes: 0,
 can_like: 1
 },
 attachments: [{
 type: 'photo',
 photo: {
 id: 405700364,
 album_id: -8,
 owner_id: -29534144,
 user_id: 71448083,
 photo_75: 'https://pp.vk.me/...10d/f_AqW_ixuSU.jpg',
 photo_130: 'https://pp.vk.me/...10e/m6tHNY75164.jpg',
 photo_604: 'https://pp.vk.me/...10f/JR1EdweIIV0.jpg',
 photo_807: 'https://pp.vk.me/...110/UjY2Bubx5So.jpg',
 photo_1280: 'https://pp.vk.me/...111/T79EaOWKanA.jpg',
 width: 1143,
 height: 800,
 text: '',
 date: 1457991451,
 access_key: 'd01f88f2446291fa10'
 }
 }]
 }],
 profiles: [{
 id: 71448083,
 first_name: 'Кирилл',
 last_name: 'Леоненко',
 sex: 2,
 screen_name: 'id71448083',
 photo_50: 'https://pp.vk.me/...dd9/onLY13CWkVo.jpg',
 photo_100: 'https://pp.vk.me/...dd8/kGp2MWmJvQM.jpg',
 online: 0
 }],
 groups: []
 }

  def parseCommentsCount(resp: String): List[Double] = for {
    Some(Dict(respJson)) <- List(JSON.parseFull(resp))
    Dict(respObj) = respJson("response")
    Arr(posts) = respObj("items")
    Dict(post) <- posts
    Dict(comments) = post("comments")
    Dbl(count) = comments("count")
  } yield count


      requestF.map(r => {
      println("counts! ")
      val counts = parseCommentsCount(r.entity.asString)
      println("counts = " + counts)
      math.round(counts.sum / counts.length)
    })



case SiftTick(s) =>
      val responce = for {
        toSift <- router.getSubjectsChunk
        chunks <- divideToChunks(toSift)
        chunk <- chunks
        toDel <- findDeletingSubjs(chunk) // TODO: Parallel
        isSended <- router.sendToDelete(toDel)
      } yield SiftTick
      responce pipeTo self


class AContentSifter(val service: ApiService, val maxUnits: Long) extends Actor {
  val (grSize, unitsCnt) = divideByUnits(service.estimateTagsLim)
  val units = for (i <- 0L until unitsCnt) yield SiftersFactory.createSiftUnit(service)

  override def receive = {
    case StartSift(estim) => {
      for {
        i <- 0L until unitsCnt
        subjT = service.getSubjectsTags(i, grSize)
        if (subjT.length > 0) // TODO: Check it carefuly
        sifterA = SiftersFactory.createSiftUnit(service)
        sifterRespF <- sifterA ? StartSiftUnit(estim, subjT)
      } sifterRespF mapTo[] self
    }
    case unknown => ??? // Log upper
  }

  // TODO:
  def divideByUnits(tagsCount: Long): Tuple2[Long, Long] = if (tagsCount < maxUnits) (1, tagsCount) else ???
  // else ((tagsCount + maxUnits - 1) / maxUnits, maxUnits)

}

object SiftersFactory {
  def createSiftUnit(service: ApiService) = Props(new ASiftUnit(service))
}

class ASiftUnit(val service: ApiService) extends Actor {

  override def receive = {
    case StartSiftUnit(estim, tags) => {
      for {
        tag <- tags
        subjs <- service.getTagSubjects(tag)
        if (subjs)
      }
        sender() ! Right()
    }
  }

  def makeSiftRound(subjs: List[Subject]) = ???
}


    val f = l.find(i => i._1.isFailure)
    if (f.isEmpty) Success(l.foldLeft(0.0){ (l, r)  => l + r._1.get * r._2 }) else f.get._1

case class Validatable[T](f: => T, msg: String);

  class Validated[T](valids: List[Validatable]) {
    val (success, failures) = valids.foldRight(List[T], List[String]) { (l, r) =>
      case (l: T, (sx, fx))       => (l :: sx, fx)
      case (l: String, (sx, fx))  => (sx, l :: fx)
    }

    def isAllSuccess = failures.length == 0
    def isAnySuccess = success.length > 0
  }
  

  validated = Validated[Int] (
    Validatable( { "123".toInt }, "123 is not an int"),
    Validatable( { "wasd".toInt }, "wasd is not an int")
  )

  if (validated.isAllSuccess) 




package cas.model.vk_subject
package cas.model._

class Subject(componentsL: List[Component]) extends cas.model.subject.Subject {
  
}



  // val json = UserSettings(25).toJson
  // println(json)
  // val setts = json.convertTo[UserSettings]
  // println(setts.likesThreshold)

  // Utils.writeToFile(Utils.dataPath + "/web.model/UserSettings.json", UserSettings(45).toJson.prettyPrint)

  // val file = Source.fromFile(Utils.dataPath + "/web.model/UserSettings.json").mkString

  // val usrSettings = if (file.trim.isEmpty) UserSettings(20) else file.parseJson.convertTo[UserSettings]

  // println(usrSettings.likesThreshold)
